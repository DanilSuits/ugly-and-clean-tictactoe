
A Tale of Two Codebases: Two Versions of 10 x 10 TicTacToe Game where First Player to 5-in-a-row Wins

What you'll need for this series of exercises:

-- Eclipse 3.2
-- The Eclemma code coverage plugin for Eclipse

Unzip and import this project into Eclipse. This Eclipse project consists of two different implementations of the same 10 x 10, first-to-5 TicTacToe game: an older, 
legacy version, and a newer, mostly-test-driven replacement. Below we ask you to compare and learn about the two games, and to make 
some specific changes to the newer one. IMPORTANT: When you make changes to the code, please insert comments that label your changes with your name or 
initials and the date, to make it easy for us to find them without your assistance. 

The older game consists of a single large class in its own source folder and package: legacy/legacyGame.LegacyGame. 
The newer game consists of the src/controller.gameplay.TicTacToeGame class, and several other classes 
(in packages src/model.gamestate, src/model.patterns, and src/model.patternsearching).

Right-click on the GameGUI applet in the package view.applet, to play the newer TicTacToeGame and get a feel for it. (You are X's, and the computer is o's.)
The LegacyGame is no longer hooked up as an applet, but you can look at the code.

Look carefully at the LegacyGame (in package legacy/legacyGame), and compare it to the new TicTacToeGame and its various classes (in packages src/model.gamestate, 
src/model.patterns, and src/model.patternsearching). After comparing the old game and the new, write down ALL THE DESIGN DIFFERENCES YOU CAN between them.

 -- Can you tell any differences in overall game play strategy between the two games?
 -- Can you mostly tell what is going on in the new game?
 -- Can you mostly tell what is going on in the old game?
 -- What do you like most and least about the old game design?
 -- What do you like most and least about the new game design?
 
You can learn more about the new game by looking at and running the unit tests in the test source folder. 
 -- What do the unit tests tell you about the new game?
 
 You can run the old game against the new game using the single test method in the OldGameAgainstNewGameTests TestCase in manualTests.manualTests. This test method is currently 
 set to play the two games against each other 500 times. 
  -- What does running this TestCase tell you about the old and new games? 
  
Exercise One:  
Install the Eclemma code coverage plugin in your copy of Eclipse, if you don't already have it. 
  -- Run the Eclemma plugin on the entire codebase; what do you notice about its overall coverage? What is your opinion of it? 
  -- Where would you choose to add new tests? Which untested methods most need coverage?
  -- Try retrofitting some tests to untested methods (be sure to leave comments to make it easy for us to find the new code you write). 
  
Exercise Two:
  -- In the new TicTacToeGame, what would it take to enable the human player to win if they get 4 in a row, while the computer must still get 5 in a row?   
  -- Test-drive this change, and then verify it manually by running the applet. 
  -- What would it take to enable the same change in the old LegacyGame class? What would your strategy be for such a change?

Exercise Three:
This game is a just a TicTacToe game. In the related game called Pente, a pair of contiguous "stones" (marks) are removed if 
they are blocked on each end by opposing player's stones (marks). (You can read more about Pente here: http://en.wikipedia.org/wiki/Pente )
  -- How would you test-drive the ability to "happen upon" an 'XOO' pattern, where you are X's and the other player is O's. How would you test-drive the ability to 
     opportunistically create a 'XOOX' pattern, and then remove the two opposing player's 'OO's? 
  -- Where would you put these new unit tests? In an existing TestCase class, or in a brand new one, or in both? 
  -- Test-drive this change, and then it verify it manually with the applet. 
  
Exercise Four:
What glaring opportunities for refactoring can you find in the new game?  Do you have the test coverage you need to make them?
  -- If you can find a good refactoring opportunity in the new game, make the change in as test-protected a way as you can. 
  
Exercise Five: 
  -- How would you evolve the TicTacToeGame strategy so that it pro-actively looks for opportunities to trap pairs of opposing player marks? 
  -- Test-drive this change, and verify it manually with the applet GUI. 
  
Exercise Six:
The current TicTacToeGame looks for continguous series of marks, for "GapSeries" of same-mark series with gaps in them (to plug), and also looks for "ShadowPositions" 
for opposing player marks that are mostly in the open. 
  -- What other kinds of strategic moves might be introduced to the game? 
  -- What other kinds of patterns might we search for and take advantage of?
  -- If you can find such a new strategy to implement it, test-drive it, and verify it manually with the applet GUI. 

EXTRA CREDIT:
  -- What would it take to make the game board 11 x 11 instead of its current 10 x 10? What code where would be affected, and how much? 
  -- Test-drive this change, and make sure the applet still appears to work. 
  -- How many tests break if you attempt this, and what is the most generalized way of repairing them so that they would continue to work for, say, a 12 x 12 board?
  -- What happens to the applet GUI?  How can it be protected from board size changes?
  -- What would it take to make this change in the old LegacyGame codebase? 

