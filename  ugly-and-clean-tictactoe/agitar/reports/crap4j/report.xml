<crap_result>
  <project>
    C:\Users\patrick\workspace\TicTacTwoAgile08
  </project>
  <project_id>
    1214226550915
  </project_id>
  <timestamp>
    6/23/08 1:15 PM
  </timestamp>
  <classDirectories>
    <classDirectory>
      C:\Users\patrick\workspace\TicTacTwoAgile08\bin
    </classDirectory>
  </classDirectories>
  <testClassDirectories>
    <testClassDirectory>
      C:\Users\patrick\workspace\TicTacTwoAgile08\bin
    </testClassDirectory>
  </testClassDirectories>
  <sourceDirectories>
    <sourceDirectory>
      C:\Users\patrick\workspace\TicTacTwoAgile08\src
    </sourceDirectory>
    <sourceDirectory>
      C:\Users\patrick\workspace\TicTacTwoAgile08\test
    </sourceDirectory>
    <sourceDirectory>
      C:\Users\patrick\workspace\TicTacTwoAgile08\manualTests
    </sourceDirectory>
    <sourceDirectory>
      C:\Users\patrick\workspace\TicTacTwoAgile08\legacyGame
    </sourceDirectory>
  </sourceDirectories>
  <libClasspaths>
    <libClasspath>
      C:\TicTacTwoAgile08
    </libClasspath>
    <libClasspath>
      C:\TicTacTwoAgile08\lib\hamcrest-core-1.1.jar
    </libClasspath>
    <libClasspath>
      C:\TicTacTwoAgile08\lib\hamcrest-library-1.1.jar
    </libClasspath>
    <libClasspath>
      C:\TicTacTwoAgile08\lib\jmock-2.4.0.jar
    </libClasspath>
    <libClasspath>
      C:\TicTacTwoAgile08\lib\jmock-junit3-2.4.0.jar
    </libClasspath>
    <libClasspath>
      C:\TicTacTwoAgile08\lib\junit-4.1.jar
    </libClasspath>
  </libClasspaths>
  <stats>
    <name>
      Method Crap Stats
    </name>
    <totalCrap>
      1207.98
    </totalCrap>
    <crap>
      3.34
    </crap>
    <median>
      2.00
    </median>
    <average>
      3.34
    </average>
    <stdDev>
      8.39
    </stdDev>
    <methodCount>
      362
    </methodCount>
    <crapMethodCount>
      6
    </crapMethodCount>
    <crapMethodPercent>
      1.66
    </crapMethodPercent>
    <crapLoad>
      29
    </crapLoad>
    <crapThreshold>
      30
    </crapThreshold>
    <globalAverage>
      5.05
    </globalAverage>
    <globalCraploadAverage>
      -1.00
    </globalCraploadAverage>
    <globalCrapMethodAverage>
      -1.00
    </globalCrapMethodAverage>
    <globalTotalMethodAverage>
      -1.00
    </globalTotalMethodAverage>
    <globalAverageDiff>
      -1.71
    </globalAverageDiff>
    <globalCraploadAverageDiff>
      30.00
    </globalCraploadAverageDiff>
    <globalCrapMethodAverageDiff>
      7.00
    </globalCrapMethodAverageDiff>
    <globalTotalMethodAverageDiff>
      363.00
    </globalTotalMethodAverageDiff>
    <shareStatsUrl>
      http://www.crap4j.org/benchmark/stats/new?stat[project_hash]=1214226550915&amp;stat[project_url]=TicTacTwoAgile08&amp;stat[crap]=1.66&amp;stat[crap_load]=29&amp;stat[crap_methods]=6&amp;stat[total_methods]=362&amp;stat[ones]=153&amp;stat[twos]=154&amp;stat[fours]=29&amp;stat[eights]=17&amp;stat[sixteens]=3&amp;stat[thirtytwos]=4&amp;stat[sixtyfours]=2&amp;stat[one28s]=0&amp;stat[two56s]=0
    </shareStatsUrl>
    <histogram>
      <hist>
        <place>
          one
        </place>
        <value>
          153
        </value>
        <height>
          168.90px
        </height>
      </hist>
      <hist>
        <place>
          two
        </place>
        <value>
          154
        </value>
        <height>
          170.00px
        </height>
      </hist>
      <hist>
        <place>
          four
        </place>
        <value>
          29
        </value>
        <height>
          32.01px
        </height>
      </hist>
      <hist>
        <place>
          eight
        </place>
        <value>
          17
        </value>
        <height>
          28.00px
        </height>
      </hist>
      <hist>
        <place>
          sixteen
        </place>
        <value>
          3
        </value>
        <height>
          28.00px
        </height>
      </hist>
      <hist>
        <place>
          thirtytwo
        </place>
        <value>
          4
        </value>
        <height>
          28.00px
        </height>
      </hist>
      <hist>
        <place>
          sixtyfour
        </place>
        <value>
          2
        </value>
        <height>
          28.00px
        </height>
      </hist>
      <hist>
        <place>
          one28
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
      <hist>
        <place>
          two56
        </place>
        <value>
          0
        </value>
        <height>
          0.00px
        </height>
      </hist>
    </histogram>
  </stats>
  <methods>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests
      </className>
      <methodName>
        testFillGapInPotentialOpposingTessera
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testFillGapInPotentialOpposingTessera()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests
      </className>
      <methodName>
        testFindTesseraEndingBlockingPositionBeforePairStartingPosition
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testFindTesseraEndingBlockingPositionBeforePairStartingPosition()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests
      </className>
      <methodName>
        testOnSecondMoveWePickShadowPosition
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testOnSecondMoveWePickShadowPosition()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests
      </className>
      <methodName>
        testViewGetsRestartedOnCreation
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testViewGetsRestartedOnCreation()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests
      </className>
      <methodName>
        testViewGetsRestartedOnStartNewGame
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testViewGetsRestartedOnStartNewGame()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests
      </className>
      <methodName>
        testViewUpdatedWithNewMarkOnMove
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testViewUpdatedWithNewMarkOnMove()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests
      </className>
      <methodName>
        testWeCanBlockASeriesOfFour
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testWeCanBlockASeriesOfFour()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        StubView
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        StubView
      </className>
      <methodName>
        drawMark
      </methodName>
      <methodSignature>
        (III)V
      </methodSignature>
      <fullMethod>
        public  void drawMark(int, int, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        StubView
      </className>
      <methodName>
        restartGame
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void restartGame()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        StubView
      </className>
      <methodName>
        theyWonGame
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void theyWonGame()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        StubView
      </className>
      <methodName>
        weWonGame
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void weWonGame()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame$MoveScore
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;II)V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;(java.lang.String, int, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame$MoveScore
      </className>
      <methodName>
        getScore
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getScore()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lmodel/strategy/IStrategy;Lview/applet/GameView;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(model.strategy.IStrategy, view.applet.GameView)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        getBoard
      </methodName>
      <methodSignature>
        ()Lmodel/gamestate/Board;
      </methodSignature>
      <fullMethod>
        public  model.gamestate.Board getBoard()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        getGameState
      </methodName>
      <methodSignature>
        ()Lmodel/gamestate/GameState;
      </methodSignature>
      <fullMethod>
        public  model.gamestate.GameState getGameState()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        getPosition
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int getPosition(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        getWinningSize
      </methodName>
      <methodSignature>
        ()Lmodel/gamestate/Board$SeriesSize;
      </methodSignature>
      <fullMethod>
        public  model.gamestate.Board$SeriesSize getWinningSize()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        inPlay
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean inPlay()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        incrementMoveNumber
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void incrementMoveNumber()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        justStarted
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean justStarted()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        lastMove
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int lastMove()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        makeCompleteMoveCycle
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void makeCompleteMoveCycle(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        makeMove
      </methodName>
      <methodSignature>
        (Z)I
      </methodSignature>
      <fullMethod>
        public  int makeMove(boolean)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        markMove
      </methodName>
      <methodSignature>
        (II)V
      </methodSignature>
      <fullMethod>
        public  void markMove(int, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        markTheirMove
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void markTheirMove(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        moveNumber
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int moveNumber()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        positionIsAvailable
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        public  boolean positionIsAvailable(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        positionIsAvailable
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        public  boolean positionIsAvailable(int, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        setBoard
      </methodName>
      <methodSignature>
        ([I)V
      </methodSignature>
      <fullMethod>
        public  void setBoard(int[])
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        startNewGame
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void startNewGame()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        theyWon
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean theyWon()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        theyWonTheGame
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        private  boolean theyWonTheGame()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        weWon
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean weWon()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        weWonTheGame
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        private  boolean weWonTheGame()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        wonTheGame
      </methodName>
      <methodSignature>
        (ILmodel/gamestate/Board$SeriesSize;)Z
      </methodSignature>
      <fullMethod>
        public  boolean wonTheGame(int, model.gamestate.Board$SeriesSize)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        switchPlayers
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int switchPlayers(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$AccessException$Offender
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$AccessException
      </className>
      <methodName>
        column
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int column()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$AccessException
      </className>
      <methodName>
        offending
      </methodName>
      <methodSignature>
        ()Lmodel/gamestate/Board$AccessException$Offender;
      </methodSignature>
      <fullMethod>
        public  model.gamestate.Board$AccessException$Offender offending()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$AccessException
      </className>
      <methodName>
        row
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int row()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$SeriesSize
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;II)V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;(java.lang.String, int, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$SeriesSize
      </className>
      <methodName>
        getSize
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getSize()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ([I)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(int[])
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        getColumnCoordFor
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public static  int getColumnCoordFor(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        getOppositePlayerMarkFor
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int getOppositePlayerMarkFor(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        getPosition
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        public  int getPosition(int, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        getRowCoordFor
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public static  int getRowCoordFor(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        getSingleCoordValueFor
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        public static  int getSingleCoordValueFor(int, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        isEmpty
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean isEmpty()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        setBoardArray
      </methodName>
      <methodSignature>
        ([I)V
      </methodSignature>
      <fullMethod>
        public  void setBoardArray(int[])
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        incrementMovenumber
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void incrementMovenumber()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        lastMove
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int lastMove()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        moveNumber
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int moveNumber()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        setInPlay
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void setInPlay()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        setLastMove
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void setLastMove(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        setTheyWon
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void setTheyWon()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        setWeWon
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void setWeWon()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        state
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int state()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Move
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (ILcontroller/gameplay/TicTacToeGame$MoveScore;Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(int, controller.gameplay.TicTacToeGame$MoveScore, java.lang.String)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Move
      </className>
      <methodName>
        getMessage
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getMessage()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Move
      </className>
      <methodName>
        getPosition
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getPosition()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Move
      </className>
      <methodName>
        getScore
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getScore()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Z)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(boolean)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        getAllMoves
      </methodName>
      <methodSignature>
        ()Ljava/util/ArrayList&lt;Lmodel/gamestate/Move;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.ArrayList&lt;model.gamestate.Move&gt; getAllMoves()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        getTwoBirdsMove
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Move;Ljava/util/ArrayList&lt;Lmodel/gamestate/Move;&gt;;)Lmodel/gamestate/Move;
      </methodSignature>
      <fullMethod>
        public  model.gamestate.Move getTwoBirdsMove(model.gamestate.Move, java.util.ArrayList&lt;model.gamestate.Move&gt;)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        size
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int size()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        GapSeries
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        GapSeries
      </className>
      <methodName>
        addEmptyPosition
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void addEmptyPosition(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        GapSeries
      </className>
      <methodName>
        getGap
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int getGap(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        GapSeries
      </className>
      <methodName>
        setBothBlockingPositionsToSameEmptySpace
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void setBothBlockingPositionsToSameEmptySpace()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        GapSeries
      </className>
      <methodName>
        setDifferentStartingAndEndingBlockingPositions
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void setDifferentStartingAndEndingBlockingPositions()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexList
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexList
      </className>
      <methodName>
        add
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void add(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexList
      </className>
      <methodName>
        contains
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        public  boolean contains(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexList
      </className>
      <methodName>
        get
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int get(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexList
      </className>
      <methodName>
        getIndexFor
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int getIndexFor(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexList
      </className>
      <methodName>
        size
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int size()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getAllIndexLists
      </methodName>
      <methodSignature>
        ()Lmodel/patterns/IndexListGroup;
      </methodSignature>
      <fullMethod>
        public  model.patterns.IndexListGroup getAllIndexLists()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getIndexDiagonalDownsWithPentaRoom
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexListGroup;)Lmodel/patterns/IndexListGroup;
      </methodSignature>
      <fullMethod>
        public  model.patterns.IndexListGroup getIndexDiagonalDownsWithPentaRoom(model.patterns.IndexListGroup)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getIndexDiagonalUps
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexListGroup;)Lmodel/patterns/IndexListGroup;
      </methodSignature>
      <fullMethod>
        public  model.patterns.IndexListGroup getIndexDiagonalUps(model.patterns.IndexListGroup)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListGroup
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListGroup
      </className>
      <methodName>
        add
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexList;)V
      </methodSignature>
      <fullMethod>
        public  void add(model.patterns.IndexList)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListGroup
      </className>
      <methodName>
        get
      </methodName>
      <methodSignature>
        (I)Lmodel/patterns/IndexList;
      </methodSignature>
      <fullMethod>
        public  model.patterns.IndexList get(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListGroup
      </className>
      <methodName>
        size
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int size()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        add
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void add(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        get
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int get(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        getEndingBlockingPosition
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getEndingBlockingPosition()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        getGap
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int getGap(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        getStartingBlockingPosition
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getStartingBlockingPosition()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        setBlockingPositionsDependingOnNumberOfEmptySpaces
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void setBlockingPositionsDependingOnNumberOfEmptySpaces()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        setEndingBlockingPosition
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void setEndingBlockingPosition(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        setStartingBlockingPosition
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void setStartingBlockingPosition(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        size
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int size()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        SeriesGroup
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(model.gamestate.Board)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        SeriesGroup
      </className>
      <methodName>
        add
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ISeries;)V
      </methodSignature>
      <fullMethod>
        public  void add(model.patterns.ISeries)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        SeriesGroup
      </className>
      <methodName>
        get
      </methodName>
      <methodSignature>
        (I)Lmodel/patterns/ISeries;
      </methodSignature>
      <fullMethod>
        public  model.patterns.ISeries get(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        SeriesGroup
      </className>
      <methodName>
        size
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int size()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        ShadowPosition
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        ShadowPosition
      </className>
      <methodName>
        getPosition
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getPosition()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        ShadowPosition
      </className>
      <methodName>
        getScore
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getScore()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        ShadowPosition
      </className>
      <methodName>
        setScore
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void setScore(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        ShadowPosition
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String toString()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        BaseSeriesFinder
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        BaseSeriesFinder
      </className>
      <methodName>
        addAllQualifyingSeriesInThisIndexList
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;ILmodel/patterns/IndexList;)V
      </methodSignature>
      <fullMethod>
        private  void addAllQualifyingSeriesInThisIndexList(model.gamestate.Board$SeriesSize, int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(model.gamestate.Board)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        addBlockingPositionsTo
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ISeries;Lmodel/patterns/IndexList;)Lmodel/patterns/ISeries;
      </methodSignature>
      <fullMethod>
        protected  model.patterns.ISeries addBlockingPositionsTo(model.patterns.ISeries, model.patterns.IndexList)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PatternFinder
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(model.gamestate.Board)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PatternFinder
      </className>
      <methodName>
        canFindSeriesOfSize
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;I)Z
      </methodSignature>
      <fullMethod>
        public  boolean canFindSeriesOfSize(model.gamestate.Board$SeriesSize, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PatternFinder
      </className>
      <methodName>
        findRandomEmptyMidBoardPosition
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int findRandomEmptyMidBoardPosition()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PatternFinder
      </className>
      <methodName>
        findRandomEmptyPosition
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int findRandomEmptyPosition()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PatternFinder
      </className>
      <methodName>
        getAlternateBlockingPositionForSeries
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getAlternateBlockingPositionForSeries()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PatternFinder
      </className>
      <methodName>
        getBestBlockingPositionForSeriesOfSize
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;I)I
      </methodSignature>
      <fullMethod>
        public  int getBestBlockingPositionForSeriesOfSize(model.gamestate.Board$SeriesSize, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PatternFinder
      </className>
      <methodName>
        getBestShadowPosition
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int getBestShadowPosition(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PatternFinder
      </className>
      <methodName>
        getGapForGapSeriesOfSize
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;I)I
      </methodSignature>
      <fullMethod>
        public  int getGapForGapSeriesOfSize(model.gamestate.Board$SeriesSize, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PenteRoomVerifier
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(model.gamestate.Board)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PenteRoomVerifier
      </className>
      <methodName>
        hasPenteRoom
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ISeries;Lmodel/patterns/IndexList;I)Z
      </methodSignature>
      <fullMethod>
        public  boolean hasPenteRoom(model.patterns.ISeries, model.patterns.IndexList, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(model.gamestate.Board)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        boostRawNumberToMidBoardRange
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        private  int boostRawNumberToMidBoardRange(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        getAnotherRandomPositionWithinRange
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        private  int getAnotherRandomPositionWithinRange()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        getPositionWithinLowerBoardRange
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        private  int getPositionWithinLowerBoardRange()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        getStartingResultCandidate
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        private  int getStartingResultCandidate()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(model.gamestate.Board)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        addBlockingPositionsTo
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ISeries;Lmodel/patterns/IndexList;)Lmodel/patterns/ISeries;
      </methodSignature>
      <fullMethod>
        protected  model.patterns.ISeries addBlockingPositionsTo(model.patterns.ISeries, model.patterns.IndexList)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        getAlternatePosition
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getAlternatePosition()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        resetSeriesFound
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void resetSeriesFound()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(model.gamestate.Board)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        getAllIndexListGroups
      </methodName>
      <methodSignature>
        ()Lmodel/patterns/IndexListGroup;
      </methodSignature>
      <fullMethod>
        private  model.patterns.IndexListGroup getAllIndexListGroups()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        getIndexOfTrialShadowPosition
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        private  int getIndexOfTrialShadowPosition(int, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        getPositionInMostOpenSeriesNearOppositePlayer
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int getPositionInMostOpenSeriesNearOppositePlayer(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        tryAllFourShadowCornersOfPlayerPosition
      </methodName>
      <methodSignature>
        (II)Ljava/util/ArrayList&lt;Lmodel/patterns/ShadowPosition;&gt;;
      </methodSignature>
      <fullMethod>
        private  java.util.ArrayList&lt;model.patterns.ShadowPosition&gt; tryAllFourShadowCornersOfPlayerPosition(int, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.strategy
      </package>
      <className>
        PatrickStrategy
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.strategy
      </package>
      <className>
        PatrickStrategy
      </className>
      <methodName>
        gatherLowerPriorityMoves
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/MoveGroup;)Lmodel/gamestate/MoveGroup;
      </methodSignature>
      <fullMethod>
         model.gamestate.MoveGroup gatherLowerPriorityMoves(model.gamestate.MoveGroup)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.strategy
      </package>
      <className>
        PatrickStrategy
      </className>
      <methodName>
        gatherPenteMoves
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/MoveGroup;)Lmodel/gamestate/MoveGroup;
      </methodSignature>
      <fullMethod>
        private  model.gamestate.MoveGroup gatherPenteMoves(model.gamestate.MoveGroup)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.strategy
      </package>
      <className>
        PatrickStrategy
      </className>
      <methodName>
        gatherTesseraMoves
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/MoveGroup;)Lmodel/gamestate/MoveGroup;
      </methodSignature>
      <fullMethod>
         model.gamestate.MoveGroup gatherTesseraMoves(model.gamestate.MoveGroup)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.strategy
      </package>
      <className>
        PatrickStrategy
      </className>
      <methodName>
        gatherTriaMoves
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/MoveGroup;)Lmodel/gamestate/MoveGroup;
      </methodSignature>
      <fullMethod>
         model.gamestate.MoveGroup gatherTriaMoves(model.gamestate.MoveGroup)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.strategy
      </package>
      <className>
        PatrickStrategy
      </className>
      <methodName>
        getBoard
      </methodName>
      <methodSignature>
        ()Lmodel/gamestate/Board;
      </methodSignature>
      <fullMethod>
        public  model.gamestate.Board getBoard()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.strategy
      </package>
      <className>
        PatrickStrategy
      </className>
      <methodName>
        gimmeANewOne
      </methodName>
      <methodSignature>
        ()Lmodel/strategy/IStrategy;
      </methodSignature>
      <fullMethod>
        public  model.strategy.IStrategy gimmeANewOne()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.strategy
      </package>
      <className>
        PatrickStrategy
      </className>
      <methodName>
        wonTheGame
      </methodName>
      <methodSignature>
        (ILmodel/gamestate/Board$SeriesSize;)Z
      </methodSignature>
      <fullMethod>
        public  boolean wonTheGame(int, model.gamestate.Board$SeriesSize)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        getPercentageOfTime
      </methodName>
      <methodSignature>
        (II)Ljava/math/BigDecimal;
      </methodSignature>
      <fullMethod>
        private  java.math.BigDecimal getPercentageOfTime(int, int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        newGameMakesAMove
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        private  int newGameMakesAMove(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        oldGameMakesAMove
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        private  int oldGameMakesAMove(int)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        reportResults
      </methodName>
      <methodSignature>
        (IJ)V
      </methodSignature>
      <fullMethod>
        private  void reportResults(int, long)
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        setUp
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        protected  void setUp()
      </fullMethod>
      <crap>
        1.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lcontroller/gameplay/MakeMoveTests;Lview/applet/GameView;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(controller.gameplay.MakeMoveTests, view.applet.GameView)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests$2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lcontroller/gameplay/MakeMoveTests;Lview/applet/GameView;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(controller.gameplay.MakeMoveTests, view.applet.GameView)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests$3
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lcontroller/gameplay/MakeMoveTests;Lview/applet/GameView;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(controller.gameplay.MakeMoveTests, view.applet.GameView)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        StubView
      </className>
      <methodName>
        gameIsADraw
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void gameIsADraw()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame$MoveScore
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame$MoveScore
      </className>
      <methodName>
        valueOf
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lcontroller/gameplay/TicTacToeGame$MoveScore;
      </methodSignature>
      <fullMethod>
        public static  controller.gameplay.TicTacToeGame$MoveScore valueOf(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame$MoveScore
      </className>
      <methodName>
        values
      </methodName>
      <methodSignature>
        ()[Lcontroller/gameplay/TicTacToeGame$MoveScore;
      </methodSignature>
      <fullMethod>
        public static  controller.gameplay.TicTacToeGame$MoveScore[] values()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        makeOurMove
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void makeOurMove()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        weHaveAWinner
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean weHaveAWinner()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        clearMarksByAxisArray
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void clearMarksByAxisArray()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        copyBoardToCheck
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        private  void copyBoardToCheck(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        copyBoardZeroToBoardTwo
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void copyBoardZeroToBoardTwo()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        copyIntoStagingBoardFromOddBoardGroupAtDepth
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void copyIntoStagingBoardFromOddBoardGroupAtDepth(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        copyStagingBoardIntoOddGroupOfBoardsAtDepth
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void copyStagingBoardIntoOddGroupOfBoardsAtDepth(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        gameBoard
      </methodName>
      <methodSignature>
        ()[[I
      </methodSignature>
      <fullMethod>
        public  int[][] gameBoard()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        getBoardCellNumber
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        private  int getBoardCellNumber(int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        markMove
      </methodName>
      <methodSignature>
        (II)V
      </methodSignature>
      <fullMethod>
        public  void markMove(int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        resetAllMarksAlongAxesForFirstHalfOfBoard
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void resetAllMarksAlongAxesForFirstHalfOfBoard()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        run
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void run()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        setFlagsForLaterProcessing
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void setFlagsForLaterProcessing(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$AccessException$Offender
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$AccessException$Offender
      </className>
      <methodName>
        valueOf
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lmodel/gamestate/Board$AccessException$Offender;
      </methodSignature>
      <fullMethod>
        public static  model.gamestate.Board$AccessException$Offender valueOf(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$AccessException$Offender
      </className>
      <methodName>
        values
      </methodName>
      <methodSignature>
        ()[Lmodel/gamestate/Board$AccessException$Offender;
      </methodSignature>
      <fullMethod>
        public static  model.gamestate.Board$AccessException$Offender[] values()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$SeriesSize
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$SeriesSize
      </className>
      <methodName>
        valueOf
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lmodel/gamestate/Board$SeriesSize;
      </methodSignature>
      <fullMethod>
        public static  model.gamestate.Board$SeriesSize valueOf(java.lang.String)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$SeriesSize
      </className>
      <methodName>
        values
      </methodName>
      <methodSignature>
        ()[Lmodel/gamestate/Board$SeriesSize;
      </methodSignature>
      <fullMethod>
        public static  model.gamestate.Board$SeriesSize[] values()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        addOccupiedPosition
      </methodName>
      <methodSignature>
        (ILjava/util/ArrayList&lt;Ljava/lang/Integer;&gt;;II)V
      </methodSignature>
      <fullMethod>
        private  void addOccupiedPosition(int, java.util.ArrayList&lt;java.lang.Integer&gt;, int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        convertAllRowsInBoard
      </methodName>
      <methodSignature>
        ([I)[[I
      </methodSignature>
      <fullMethod>
        private  int[][] convertAllRowsInBoard(int[])
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        convertAllSquaresInRow
      </methodName>
      <methodSignature>
        ([III)I
      </methodSignature>
      <fullMethod>
        private  int convertAllSquaresInRow(int[], int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        convertOneDimensionaltoTwoDimensionalBoardArray
      </methodName>
      <methodSignature>
        ([I)[[I
      </methodSignature>
      <fullMethod>
        private  int[][] convertOneDimensionaltoTwoDimensionalBoardArray(int[])
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        getAllOccupiedPositionsInRow
      </methodName>
      <methodSignature>
        (ILjava/util/ArrayList&lt;Ljava/lang/Integer;&gt;;I)V
      </methodSignature>
      <fullMethod>
        private  void getAllOccupiedPositionsInRow(int, java.util.ArrayList&lt;java.lang.Integer&gt;, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        getAllPositionsOccupiedByPlayer
      </methodName>
      <methodSignature>
        (I)Ljava/util/ArrayList&lt;Ljava/lang/Integer;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.ArrayList&lt;java.lang.Integer&gt; getAllPositionsOccupiedByPlayer(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        getPosition
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int getPosition(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        setPosition
      </methodName>
      <methodSignature>
        (III)V
      </methodSignature>
      <fullMethod>
        public  void setPosition(int, int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        inPlay
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean inPlay()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        setDraw
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void setDraw()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        theyWon
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean theyWon()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        weWon
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean weWon()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        calculateNumberOfMoveRecurrences
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Move;)I
      </methodSignature>
      <fullMethod>
        private  int calculateNumberOfMoveRecurrences(model.gamestate.Move)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        findMoveThatRepeatsMost
      </methodName>
      <methodSignature>
        (Ljava/util/ArrayList&lt;Lmodel/gamestate/Move;&gt;;)Lmodel/gamestate/Move;
      </methodSignature>
      <fullMethod>
        public  model.gamestate.Move findMoveThatRepeatsMost(java.util.ArrayList&lt;model.gamestate.Move&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        getAllMovesWithSameScoreAsHighestScoringMove
      </methodName>
      <methodSignature>
        (Ljava/util/ArrayList&lt;Lmodel/gamestate/Move;&gt;;Lmodel/gamestate/Move;)Ljava/util/ArrayList&lt;Lmodel/gamestate/Move;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.ArrayList&lt;model.gamestate.Move&gt; getAllMovesWithSameScoreAsHighestScoringMove(java.util.ArrayList&lt;model.gamestate.Move&gt;, model.gamestate.Move)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        getFirstHighestScoringSingleMove
      </methodName>
      <methodSignature>
        ()Lmodel/gamestate/Move;
      </methodSignature>
      <fullMethod>
        public  model.gamestate.Move getFirstHighestScoringSingleMove()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        incrementMoveOccurrencesIfMoveRecurs
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Move;II)I
      </methodSignature>
      <fullMethod>
        private  int incrementMoveOccurrencesIfMoveRecurs(model.gamestate.Move, int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        saveThisMoveAsNewBestMoveIfPossible
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Move;II)Lmodel/gamestate/Move;
      </methodSignature>
      <fullMethod>
        private  model.gamestate.Move saveThisMoveAsNewBestMoveIfPossible(model.gamestate.Move, int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        GapSeries
      </className>
      <methodName>
        weHaveNoEmptySpaces
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        private  boolean weHaveNoEmptySpaces()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        GapSeries
      </className>
      <methodName>
        weOnlyHaveOneEmptySpace
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        private  boolean weOnlyHaveOneEmptySpace()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexList
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String toString()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        assembleLowerBoardDiagonalDownsWithPentaRoom
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexListGroup;)I
      </methodSignature>
      <fullMethod>
        private  int assembleLowerBoardDiagonalDownsWithPentaRoom(model.patterns.IndexListGroup)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        assembleLowerBoardDiagonalUps
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexListGroup;)V
      </methodSignature>
      <fullMethod>
        private  void assembleLowerBoardDiagonalUps(model.patterns.IndexListGroup)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        assembleUpperBoardDiagonalDownsWithPentaRoom
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexListGroup;)V
      </methodSignature>
      <fullMethod>
        private  void assembleUpperBoardDiagonalDownsWithPentaRoom(model.patterns.IndexListGroup)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        assembleUpperBoardDiagonalUps
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexListGroup;)I
      </methodSignature>
      <fullMethod>
        private  int assembleUpperBoardDiagonalUps(model.patterns.IndexListGroup)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getAllSpacesInThisColumn
      </methodName>
      <methodSignature>
        (ILmodel/patterns/IndexList;)V
      </methodSignature>
      <fullMethod>
        private  void getAllSpacesInThisColumn(int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getAllSpacesInThisLowerBoardDiagonalDown
      </methodName>
      <methodSignature>
        (IILmodel/patterns/IndexList;)V
      </methodSignature>
      <fullMethod>
        private  void getAllSpacesInThisLowerBoardDiagonalDown(int, int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getAllSpacesInThisLowerBoardDiagonalUp
      </methodName>
      <methodSignature>
        (IILmodel/patterns/IndexList;)V
      </methodSignature>
      <fullMethod>
        private  void getAllSpacesInThisLowerBoardDiagonalUp(int, int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getAllSpacesInThisRow
      </methodName>
      <methodSignature>
        (ILmodel/patterns/IndexList;)V
      </methodSignature>
      <fullMethod>
        private  void getAllSpacesInThisRow(int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getAllSpacesInThisUpperBoardDiagonalDown
      </methodName>
      <methodSignature>
        (IILmodel/patterns/IndexList;)V
      </methodSignature>
      <fullMethod>
        private  void getAllSpacesInThisUpperBoardDiagonalDown(int, int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getAllSpacesInThisUpperBoardDiagonalUp
      </methodName>
      <methodSignature>
        (IILmodel/patterns/IndexList;)V
      </methodSignature>
      <fullMethod>
        private  void getAllSpacesInThisUpperBoardDiagonalUp(int, int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getIndexHorizontalRows
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexListGroup;)Lmodel/patterns/IndexListGroup;
      </methodSignature>
      <fullMethod>
        public  model.patterns.IndexListGroup getIndexHorizontalRows(model.patterns.IndexListGroup)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        IndexListFactory
      </className>
      <methodName>
        getIndexVerticalColumns
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexListGroup;)Lmodel/patterns/IndexListGroup;
      </methodSignature>
      <fullMethod>
        public  model.patterns.IndexListGroup getIndexVerticalColumns(model.patterns.IndexListGroup)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        Series
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String toString()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        BaseSeriesFinder
      </className>
      <methodName>
        addQualifyingSeries
      </methodName>
      <methodSignature>
        (ILmodel/patterns/ISeries;Lmodel/patterns/IndexList;)Lmodel/patterns/SeriesGroup;
      </methodSignature>
      <fullMethod>
        public  model.patterns.SeriesGroup addQualifyingSeries(int, model.patterns.ISeries, model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        BaseSeriesFinder
      </className>
      <methodName>
        addSeriesWithPenteRoom
      </methodName>
      <methodSignature>
        (ILmodel/patterns/ISeries;Lmodel/patterns/IndexList;)V
      </methodSignature>
      <fullMethod>
        private  void addSeriesWithPenteRoom(int, model.patterns.ISeries, model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        BaseSeriesFinder
      </className>
      <methodName>
        getAllSeriesOfSize
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;I)Lmodel/patterns/SeriesGroup;
      </methodSignature>
      <fullMethod>
        public  model.patterns.SeriesGroup getAllSeriesOfSize(model.gamestate.Board$SeriesSize, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        addSeriesIfItQualifies
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexList;)Lmodel/patterns/ISeries;
      </methodSignature>
      <fullMethod>
        private  model.patterns.ISeries addSeriesIfItQualifies(model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        createGapSeries
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexList;)Lmodel/patterns/ISeries;
      </methodSignature>
      <fullMethod>
        protected  model.patterns.ISeries createGapSeries(model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        getNextCandidateListOfExpectedSize
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexList;I)Lmodel/patterns/IndexList;
      </methodSignature>
      <fullMethod>
        protected  model.patterns.IndexList getNextCandidateListOfExpectedSize(model.patterns.IndexList, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        markPositionAsEmptyIfEmpty
      </methodName>
      <methodSignature>
        (Lmodel/patterns/GapSeries;I)V
      </methodSignature>
      <fullMethod>
        private  void markPositionAsEmptyIfEmpty(model.patterns.GapSeries, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        positionContainsBoardMark
      </methodName>
      <methodSignature>
        (IILmodel/patterns/IndexList;)Z
      </methodSignature>
      <fullMethod>
        private  boolean positionContainsBoardMark(int, int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        positionEquals
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        protected  boolean positionEquals(int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        searchIndexListForSeriesOfSize
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexList;Lmodel/gamestate/Board$SeriesSize;I)Lmodel/patterns/ISeries;
      </methodSignature>
      <fullMethod>
        protected  model.patterns.ISeries searchIndexListForSeriesOfSize(model.patterns.IndexList, model.gamestate.Board$SeriesSize, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PenteRoomVerifier
      </className>
      <methodName>
        hasPenteRoomForPlayerMark
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexList;II)Z
      </methodSignature>
      <fullMethod>
        public  boolean hasPenteRoomForPlayerMark(model.patterns.IndexList, int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PenteRoomVerifier
      </className>
      <methodName>
        weHaveEncounteredOtherPlayerMark
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        private  boolean weHaveEncounteredOtherPlayerMark(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        candidatePositionIsNotEmpty
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        private  boolean candidatePositionIsNotEmpty(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        findRandomEmptyPosition
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int findRandomEmptyPosition()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        weHaveRunOutOfTries
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        private  boolean weHaveRunOutOfTries(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        containsSeriesOfSize
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;I)Z
      </methodSignature>
      <fullMethod>
        public  boolean containsSeriesOfSize(model.gamestate.Board$SeriesSize, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        findAlternateBlockingPositionIfPossible
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ISeries;)V
      </methodSignature>
      <fullMethod>
        private  void findAlternateBlockingPositionIfPossible(model.patterns.ISeries)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        ourSeriesSoFarIsBigEnough
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;Lmodel/patterns/ISeries;)Z
      </methodSignature>
      <fullMethod>
        private  boolean ourSeriesSoFarIsBigEnough(model.gamestate.Board$SeriesSize, model.patterns.ISeries)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        ourSeriesSoFarIsNotBigEnough
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;Lmodel/patterns/ISeries;)Z
      </methodSignature>
      <fullMethod>
        private  boolean ourSeriesSoFarIsNotBigEnough(model.gamestate.Board$SeriesSize, model.patterns.ISeries)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        seriesHasOpenEndingBlockingPosition
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ISeries;)Z
      </methodSignature>
      <fullMethod>
        private  boolean seriesHasOpenEndingBlockingPosition(model.patterns.ISeries)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        seriesHasOpenStartingBlockingPosition
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ISeries;)Z
      </methodSignature>
      <fullMethod>
        private  boolean seriesHasOpenStartingBlockingPosition(model.patterns.ISeries)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        thisPositionIsPartOfSeries
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        private  boolean thisPositionIsPartOfSeries(int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        addDiagonalDownBeforePositionIfPossible
      </methodName>
      <methodSignature>
        (IILjava/util/ArrayList&lt;Lmodel/patterns/ShadowPosition;&gt;;)V
      </methodSignature>
      <fullMethod>
        private  void addDiagonalDownBeforePositionIfPossible(int, int, java.util.ArrayList&lt;model.patterns.ShadowPosition&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        addDiagonalDownShadowIfPossible
      </methodName>
      <methodSignature>
        (IILjava/util/ArrayList&lt;Lmodel/patterns/ShadowPosition;&gt;;)V
      </methodSignature>
      <fullMethod>
        private  void addDiagonalDownShadowIfPossible(int, int, java.util.ArrayList&lt;model.patterns.ShadowPosition&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        addDiagonalUpAfterShadowIfPossible
      </methodName>
      <methodSignature>
        (IILjava/util/ArrayList&lt;Lmodel/patterns/ShadowPosition;&gt;;)V
      </methodSignature>
      <fullMethod>
        private  void addDiagonalUpAfterShadowIfPossible(int, int, java.util.ArrayList&lt;model.patterns.ShadowPosition&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        addDiagonalUpBeforeShadowIfPossible
      </methodName>
      <methodSignature>
        (IILjava/util/ArrayList&lt;Lmodel/patterns/ShadowPosition;&gt;;)V
      </methodSignature>
      <fullMethod>
        private  void addDiagonalUpBeforeShadowIfPossible(int, int, java.util.ArrayList&lt;model.patterns.ShadowPosition&gt;)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        openLinesWithPentaRoomForPosition
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ShadowPosition;I)I
      </methodSignature>
      <fullMethod>
        public  int openLinesWithPentaRoomForPosition(model.patterns.ShadowPosition, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        positionIsEmpty
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ShadowPosition;)Z
      </methodSignature>
      <fullMethod>
        private  boolean positionIsEmpty(model.patterns.ShadowPosition)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        positionIsOutOfBounds
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ShadowPosition;)Z
      </methodSignature>
      <fullMethod>
        private  boolean positionIsOutOfBounds(model.patterns.ShadowPosition)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lview/applet/GameGUI;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(view.applet.GameGUI)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI$1
      </className>
      <methodName>
        mouseReleased
      </methodName>
      <methodSignature>
        (Ljava/awt/event/MouseEvent;)V
      </methodSignature>
      <fullMethod>
        public  void mouseReleased(java.awt.event.MouseEvent)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI$2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lview/applet/GameGUI;II)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(view.applet.GameGUI, int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI$2
      </className>
      <methodName>
        run
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void run()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        access$0
      </methodName>
      <methodSignature>
        (Lview/applet/GameGUI;)Ljava/awt/Graphics;
      </methodSignature>
      <fullMethod>
        static  java.awt.Graphics access$0(view.applet.GameGUI)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        access$1
      </methodName>
      <methodSignature>
        (Lview/applet/GameGUI;)Lview/applet/GameImages;
      </methodSignature>
      <fullMethod>
        static  view.applet.GameImages access$1(view.applet.GameGUI)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        gameIsADraw
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void gameIsADraw()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        getPlayerPosition
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        private  int getPlayerPosition(int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        init
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void init()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        paint
      </methodName>
      <methodSignature>
        (Ljava/awt/Graphics;)V
      </methodSignature>
      <fullMethod>
        public  void paint(java.awt.Graphics)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        resetToolbar
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void resetToolbar()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        restartGame
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void restartGame()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        scheduleUpdateLastPlayedImage
      </methodName>
      <methodSignature>
        (II)V
      </methodSignature>
      <fullMethod>
        private  void scheduleUpdateLastPlayedImage(int, int)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        theyWonGame
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void theyWonGame()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        update
      </methodName>
      <methodSignature>
        (Ljava/awt/Graphics;)V
      </methodSignature>
      <fullMethod>
        public  void update(java.awt.Graphics)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        weWonGame
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void weWonGame()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/applet/Applet;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.applet.Applet)
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        awaitImageLoad
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void awaitImageLoad()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        getEmptySquare
      </methodName>
      <methodSignature>
        ()Ljava/awt/Image;
      </methodSignature>
      <fullMethod>
        public  java.awt.Image getEmptySquare()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        getFilledOMark
      </methodName>
      <methodSignature>
        ()Ljava/awt/Image;
      </methodSignature>
      <fullMethod>
        public  java.awt.Image getFilledOMark()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        getLosingImage
      </methodName>
      <methodSignature>
        ()Ljava/awt/Image;
      </methodSignature>
      <fullMethod>
        public  java.awt.Image getLosingImage()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        getNewGameImage
      </methodName>
      <methodSignature>
        ()Ljava/awt/Image;
      </methodSignature>
      <fullMethod>
        public  java.awt.Image getNewGameImage()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        getOMark
      </methodName>
      <methodSignature>
        ()Ljava/awt/Image;
      </methodSignature>
      <fullMethod>
        public  java.awt.Image getOMark()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        getTracker
      </methodName>
      <methodSignature>
        ()Ljava/awt/MediaTracker;
      </methodSignature>
      <fullMethod>
        public  java.awt.MediaTracker getTracker()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        getWinningImage
      </methodName>
      <methodSignature>
        ()Ljava/awt/Image;
      </methodSignature>
      <fullMethod>
        public  java.awt.Image getWinningImage()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        getXMark
      </methodName>
      <methodSignature>
        ()Ljava/awt/Image;
      </methodSignature>
      <fullMethod>
        public  java.awt.Image getXMark()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        getYourTurnImage
      </methodName>
      <methodSignature>
        ()Ljava/awt/Image;
      </methodSignature>
      <fullMethod>
        public  java.awt.Image getYourTurnImage()
      </fullMethod>
      <crap>
        2.00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        bestOverallMove
      </methodName>
      <methodSignature>
        ()Lmodel/gamestate/Move;
      </methodSignature>
      <fullMethod>
        public  model.gamestate.Move bestOverallMove()
      </fullMethod>
      <crap>
        2.03
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        80.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        createGapSeriesIfIndexListIsOfExpectedSize
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexList;)Lmodel/patterns/ISeries;
      </methodSignature>
      <fullMethod>
        private  model.patterns.ISeries createGapSeriesIfIndexListIsOfExpectedSize(model.patterns.IndexList)
      </fullMethod>
      <crap>
        2.06
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        75.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        getNextHighScoringMove
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Move;I)Lmodel/gamestate/Move;
      </methodSignature>
      <fullMethod>
        private  model.gamestate.Move getNextHighScoringMove(model.gamestate.Move, int)
      </fullMethod>
      <crap>
        2.26
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        60.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        isDraw
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        private  boolean isDraw()
      </fullMethod>
      <crap>
        2.50
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        50.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        makeArbitraryFirstComputerMoveBasedOnPlayerY
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        private  int makeArbitraryFirstComputerMoveBasedOnPlayerY(int, int)
      </fullMethod>
      <crap>
        2.50
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        50.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        draw
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean draw()
      </fullMethod>
      <crap>
        2.50
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        50.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        GameState
      </className>
      <methodName>
        justStarted
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean justStarted()
      </fullMethod>
      <crap>
        2.50
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        50.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Move
      </className>
      <methodName>
        isValidMove
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean isValidMove()
      </fullMethod>
      <crap>
        2.50
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        50.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        foundGoodBlockingPosition
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        private  boolean foundGoodBlockingPosition()
      </fullMethod>
      <crap>
        2.50
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        50.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.strategy
      </package>
      <className>
        PatrickStrategy
      </className>
      <methodName>
        weFoundAGoodPosition
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        private static  boolean weFoundAGoodPosition(int)
      </fullMethod>
      <crap>
        2.50
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        50.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        noWinnerYet
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        public  boolean noWinnerYet()
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkFor5AlongDiagDownRightAxis
      </methodName>
      <methodSignature>
        (IIIIII)I
      </methodSignature>
      <fullMethod>
        public  int checkFor5AlongDiagDownRightAxis(int, int, int, int, int, int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkFor5AlongDiagUpRightAxis
      </methodName>
      <methodSignature>
        (IIIIII)I
      </methodSignature>
      <fullMethod>
        public  int checkFor5AlongDiagUpRightAxis(int, int, int, int, int, int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        allRowsInBoardAreEmpty
      </methodName>
      <methodSignature>
        ()Z
      </methodSignature>
      <fullMethod>
        private  boolean allRowsInBoardAreEmpty()
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        allSquaresInRowAreEmpty
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        private  boolean allSquaresInRowAreEmpty(int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        positionIsEmpty
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        public  boolean positionIsEmpty(int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        positionIsEmpty
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        public  boolean positionIsEmpty(int, int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        within1DBoardPositionIndexBounds
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        public  boolean within1DBoardPositionIndexBounds(int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        add
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Move;)V
      </methodSignature>
      <fullMethod>
        public  void add(model.gamestate.Move)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patterns
      </package>
      <className>
        GapSeries
      </className>
      <methodName>
        setBlockingPositionsDependingOnNumberOfEmptySpaces
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void setBlockingPositionsDependingOnNumberOfEmptySpaces()
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        candidateListContainsBoardMark
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexList;I)Z
      </methodSignature>
      <fullMethod>
        protected  boolean candidateListContainsBoardMark(model.patterns.IndexList, int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        qualifyingGapSeries
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;Lmodel/patterns/IndexList;)Lmodel/patterns/ISeries;
      </methodSignature>
      <fullMethod>
        private  model.patterns.ISeries qualifyingGapSeries(model.gamestate.Board$SeriesSize, model.patterns.IndexList)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        GapSeriesFinder
      </className>
      <methodName>
        weHaveASeries
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        private  boolean weHaveASeries(int, int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        isNotWithinBounds
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        private  boolean isNotWithinBounds(int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        isWithinMidBoardVerticalStripe
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        private  boolean isWithinMidBoardVerticalStripe(int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        getBlockingPositionAfter
      </methodName>
      <methodSignature>
        (ILmodel/patterns/IndexList;)I
      </methodSignature>
      <fullMethod>
        protected  int getBlockingPositionAfter(int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        getBlockingPositionBefore
      </methodName>
      <methodSignature>
        (ILmodel/patterns/IndexList;)I
      </methodSignature>
      <fullMethod>
        protected  int getBlockingPositionBefore(int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        weFoundLastPositionInExpectedSeries
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;I)Z
      </methodSignature>
      <fullMethod>
        private  boolean weFoundLastPositionInExpectedSeries(model.gamestate.Board$SeriesSize, int)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        incrementOpenLinesCountIfThisLineIsOpen
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ShadowPosition;ILmodel/patterns/IndexList;)I
      </methodSignature>
      <fullMethod>
        private  int incrementOpenLinesCountIfThisLineIsOpen(model.patterns.ShadowPosition, int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        playNewGameAgainstOldGame
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void playNewGameAgainstOldGame()
      </fullMethod>
      <crap>
        3.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        getBestBlockingPositionForSeriesOfSize
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Board$SeriesSize;I)I
      </methodSignature>
      <fullMethod>
        public  int getBestBlockingPositionForSeriesOfSize(model.gamestate.Board$SeriesSize, int)
      </fullMethod>
      <crap>
        3.01
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        90.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        findBestBlockingPositions
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ISeries;)V
      </methodSignature>
      <fullMethod>
        private  void findBestBlockingPositions(model.patterns.ISeries)
      </fullMethod>
      <crap>
        3.02
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        87.50
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.strategy
      </package>
      <className>
        PatrickStrategy
      </className>
      <methodName>
        makeMove
      </methodName>
      <methodSignature>
        (Z)I
      </methodSignature>
      <fullMethod>
        public  int makeMove(boolean)
      </fullMethod>
      <crap>
        3.03
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        84.62
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        addValidMoveIfSameScoreAsHighestScoringMove
      </methodName>
      <methodSignature>
        (Lmodel/gamestate/Move;Ljava/util/ArrayList&lt;Lmodel/gamestate/Move;&gt;;I)Ljava/util/ArrayList&lt;Lmodel/gamestate/Move;&gt;;
      </methodSignature>
      <fullMethod>
        private  java.util.ArrayList&lt;model.gamestate.Move&gt; addValidMoveIfSameScoreAsHighestScoringMove(model.gamestate.Move, java.util.ArrayList&lt;model.gamestate.Move&gt;, int)
      </fullMethod>
      <crap>
        3.04
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        83.33
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        isWithinMidBoardHorizontalStripe
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        private  boolean isWithinMidBoardHorizontalStripe(int)
      </fullMethod>
      <crap>
        3.14
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        75.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        MakeMoveTests
      </className>
      <methodName>
        testWePickRandomMidBoardSpotForNewGame
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testWePickRandomMidBoardSpotForNewGame()
      </fullMethod>
      <crap>
        3.33
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        66.67
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        check2o3c
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        public  int check2o3c(int, int)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkFor5AlongHorizAxis
      </methodName>
      <methodSignature>
        (IIIII)I
      </methodSignature>
      <fullMethod>
        public  int checkFor5AlongHorizAxis(int, int, int, int, int)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkFor5AlongVertAxis
      </methodName>
      <methodSignature>
        (IIIII)I
      </methodSignature>
      <fullMethod>
        public  int checkFor5AlongVertAxis(int, int, int, int, int)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkForDiagDown4InRow
      </methodName>
      <methodSignature>
        (IIII)I
      </methodSignature>
      <fullMethod>
        public  int checkForDiagDown4InRow(int, int, int, int)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkForDiagUp4InRow
      </methodName>
      <methodSignature>
        (IIII)I
      </methodSignature>
      <fullMethod>
        public  int checkForDiagUp4InRow(int, int, int, int)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkForHoriz4InRow
      </methodName>
      <methodSignature>
        (IIII)I
      </methodSignature>
      <fullMethod>
        public  int checkForHoriz4InRow(int, int, int, int)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkForVert4InRow
      </methodName>
      <methodSignature>
        (IIII)I
      </methodSignature>
      <fullMethod>
        public  int checkForVert4InRow(int, int, int, int)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        tryToFindPositionGivingSeriesOf4OnTwoOrMoreAxes
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        public  int tryToFindPositionGivingSeriesOf4OnTwoOrMoreAxes(int, int)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        RandomPositionFinder
      </className>
      <methodName>
        findRandomEmptyMidBoardPosition
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int findRandomEmptyMidBoardPosition()
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        findHighestScoringShadowPosition
      </methodName>
      <methodSignature>
        (Lmodel/patterns/ShadowPosition;Ljava/util/ArrayList&lt;Lmodel/patterns/ShadowPosition;&gt;;)Lmodel/patterns/ShadowPosition;
      </methodSignature>
      <fullMethod>
        private  model.patterns.ShadowPosition findHighestScoringShadowPosition(model.patterns.ShadowPosition, java.util.ArrayList&lt;model.patterns.ShadowPosition&gt;)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        findOppositePlayerPositionWithHighScoringShadow
      </methodName>
      <methodSignature>
        (ILmodel/patterns/ShadowPosition;Ljava/util/ArrayList&lt;Ljava/lang/Integer;&gt;;)Lmodel/patterns/ShadowPosition;
      </methodSignature>
      <fullMethod>
        private  model.patterns.ShadowPosition findOppositePlayerPositionWithHighScoringShadow(int, model.patterns.ShadowPosition, java.util.ArrayList&lt;java.lang.Integer&gt;)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        ShadowPositionFinder
      </className>
      <methodName>
        getPositionNearTheirPosition
      </methodName>
      <methodSignature>
        (III)Lmodel/patterns/ShadowPosition;
      </methodSignature>
      <fullMethod>
        public  model.patterns.ShadowPosition getPositionNearTheirPosition(int, int, int)
      </fullMethod>
      <crap>
        4.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PenteRoomVerifier
      </className>
      <methodName>
        getRoomAfterThisPosition
      </methodName>
      <methodSignature>
        (ILmodel/patterns/IndexList;)I
      </methodSignature>
      <fullMethod>
        private  int getRoomAfterThisPosition(int, model.patterns.IndexList)
      </fullMethod>
      <crap>
        4.02
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        90.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        PenteRoomVerifier
      </className>
      <methodName>
        getRoomBeforeThisPosition
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexList;I)I
      </methodSignature>
      <fullMethod>
        private  int getRoomBeforeThisPosition(model.patterns.IndexList, int)
      </fullMethod>
      <crap>
        4.02
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        90.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        oldGameMakesMove
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        private  int oldGameMakesMove(int, int)
      </fullMethod>
      <crap>
        4.03
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        87.50
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        newGameMakesMove
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        private  int newGameMakesMove(int, int)
      </fullMethod>
      <crap>
        4.18
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        77.78
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        controller.gameplay
      </package>
      <className>
        TicTacToeGame
      </className>
      <methodName>
        updateGameState
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void updateGameState()
      </fullMethod>
      <crap>
        4.20
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        76.92
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkForWinOpportunity
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        public  int checkForWinOpportunity(int, int)
      </fullMethod>
      <crap>
        4.94
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        40.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board
      </className>
      <methodName>
        within2DBoardPositionIndexBounds
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        public  boolean within2DBoardPositionIndexBounds(int, int)
      </fullMethod>
      <crap>
        5.00
      </crap>
      <complexity>
        5
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.patternsearching
      </package>
      <className>
        SeriesFinder
      </className>
      <methodName>
        searchIndexListForSeriesOfSize
      </methodName>
      <methodSignature>
        (Lmodel/patterns/IndexList;Lmodel/gamestate/Board$SeriesSize;I)Lmodel/patterns/ISeries;
      </methodSignature>
      <fullMethod>
        protected  model.patterns.ISeries searchIndexListForSeriesOfSize(model.patterns.IndexList, model.gamestate.Board$SeriesSize, int)
      </fullMethod>
      <crap>
        5.00
      </crap>
      <complexity>
        5
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        determineWinner
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void determineWinner()
      </fullMethod>
      <crap>
        5.01
      </crap>
      <complexity>
        5
      </complexity>
      <coverage>
        91.67
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        doubleDigitRow
      </methodName>
      <methodSignature>
        (I)Z
      </methodSignature>
      <fullMethod>
        private  boolean doubleDigitRow(int)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        resetBoard
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void resetBoard()
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        resetMainGameBoard
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void resetMainGameBoard(int)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        returnPrintableBoard
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String returnPrintableBoard(java.lang.String)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        tryToMake3WithGap_FromVert4IntersectingWithHoriz4
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        public  int tryToMake3WithGap_FromVert4IntersectingWithHoriz4(int, int)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        6
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        Board$AccessException
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (II)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(int, int)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        6
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        model.gamestate
      </package>
      <className>
        MoveGroup
      </className>
      <methodName>
        add
      </methodName>
      <methodSignature>
        (Ljava/util/ArrayList&lt;Ljava/lang/Integer;&gt;;Lcontroller/gameplay/TicTacToeGame$MoveScore;Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void add(java.util.ArrayList&lt;java.lang.Integer&gt;, controller.gameplay.TicTacToeGame$MoveScore, java.lang.String)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        drawMark
      </methodName>
      <methodSignature>
        (III)V
      </methodSignature>
      <fullMethod>
        public  void drawMark(int, int, int)
      </fullMethod>
      <crap>
        6.00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkCross
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int checkCross(int)
      </fullMethod>
      <crap>
        8.00
      </crap>
      <complexity>
        8
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        oldagainstnewgame
      </package>
      <className>
        OldGameAgainstNewGameTests
      </className>
      <methodName>
        testNewGameKicksOldGamesButt
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void testNewGameKicksOldGamesButt()
      </fullMethod>
      <crap>
        8.58
      </crap>
      <complexity>
        7
      </complexity>
      <coverage>
        68.18
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        anyDiagDown4MatchToMark
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        public  boolean anyDiagDown4MatchToMark(int, int)
      </fullMethod>
      <crap>
        9.00
      </crap>
      <complexity>
        9
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        anyDiagUp4MatchToMark
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        public  boolean anyDiagUp4MatchToMark(int, int)
      </fullMethod>
      <crap>
        9.00
      </crap>
      <complexity>
        9
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        anyHoriz4MatchToMark
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        public  boolean anyHoriz4MatchToMark(int, int)
      </fullMethod>
      <crap>
        9.00
      </crap>
      <complexity>
        9
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        anyVert4MatchToMark
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        public  boolean anyVert4MatchToMark(int, int)
      </fullMethod>
      <crap>
        9.00
      </crap>
      <complexity>
        9
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkBox
      </methodName>
      <methodSignature>
        (I)I
      </methodSignature>
      <fullMethod>
        public  int checkBox(int)
      </fullMethod>
      <crap>
        9.00
      </crap>
      <complexity>
        9
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        closeGapInSeries
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int closeGapInSeries()
      </fullMethod>
      <crap>
        9.00
      </crap>
      <complexity>
        9
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        checkSeries
      </methodName>
      <methodSignature>
        (II)I
      </methodSignature>
      <fullMethod>
        public  int checkSeries(int, int)
      </fullMethod>
      <crap>
        9.09
      </crap>
      <complexity>
        9
      </complexity>
      <coverage>
        89.47
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        createTwoAxesOrCreateOneAndBlockAnother
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        private  int createTwoAxesOrCreateOneAndBlockAnother()
      </fullMethod>
      <crap>
        11.00
      </crap>
      <complexity>
        11
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        cannotMakeAMove
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        private  boolean cannotMakeAMove(int, int)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        drawEmptyBoard
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void drawEmptyBoard()
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        gameNotInPlay
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        private  boolean gameNotInPlay(int, int)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        handleMouseEvent
      </methodName>
      <methodSignature>
        (II)V
      </methodSignature>
      <fullMethod>
        public  void handleMouseEvent(int, int)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameGUI
      </className>
      <methodName>
        playerClickedNewGameButton
      </methodName>
      <methodSignature>
        (II)Z
      </methodSignature>
      <fullMethod>
        private  boolean playerClickedNewGameButton(int, int)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        view.applet
      </package>
      <className>
        GameImages
      </className>
      <methodName>
        getImageForPlayerMark
      </methodName>
      <methodSignature>
        (I)Ljava/awt/Image;
      </methodSignature>
      <fullMethod>
        public  java.awt.Image getImageForPlayerMark(int)
      </fullMethod>
      <crap>
        12.00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        findSpot
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int findSpot()
      </fullMethod>
      <crap>
        15.00
      </crap>
      <complexity>
        15
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        win
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int win()
      </fullMethod>
      <crap>
        16.00
      </crap>
      <complexity>
        16
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        responseTo3Or4InaRowOpportunity
      </methodName>
      <methodSignature>
        (III)I
      </methodSignature>
      <fullMethod>
        public  int responseTo3Or4InaRowOpportunity(int, int, int)
      </fullMethod>
      <crap>
        18.00
      </crap>
      <complexity>
        18
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        respondToMouseUp
      </methodName>
      <methodSignature>
        (III)V
      </methodSignature>
      <fullMethod>
        public  void respondToMouseUp(int, int, int)
      </fullMethod>
      <crap>
        20.00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        blockSeriesOfFourOrMore
      </methodName>
      <methodSignature>
        (III)I
      </methodSignature>
      <fullMethod>
        public  int blockSeriesOfFourOrMore(int, int, int)
      </fullMethod>
      <crap>
        33.09
      </crap>
      <complexity>
        33
      </complexity>
      <coverage>
        95.60
      </coverage>
      <crapLoad>
        2
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        setc4c
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void setc4c(int)
      </fullMethod>
      <crap>
        34.00
      </crap>
      <complexity>
        34
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        1
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        seto4cc
      </methodName>
      <methodSignature>
        (I)V
      </methodSignature>
      <fullMethod>
        public  void seto4cc(int)
      </fullMethod>
      <crap>
        42.00
      </crap>
      <complexity>
        42
      </complexity>
      <coverage>
        100.00
      </coverage>
      <crapLoad>
        1
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        countNumberOfAxesAlongWhichSeriesOfFourOccur
      </methodName>
      <methodSignature>
        (III)I
      </methodSignature>
      <fullMethod>
        public  int countNumberOfAxesAlongWhichSeriesOfFourOccur(int, int, int)
      </fullMethod>
      <crap>
        48.13
      </crap>
      <complexity>
        47
      </complexity>
      <coverage>
        92.00
      </coverage>
      <crapLoad>
        4
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        makeComputerMove
      </methodName>
      <methodSignature>
        (IIZ)I
      </methodSignature>
      <fullMethod>
        public  int makeComputerMove(int, int, boolean)
      </fullMethod>
      <crap>
        81.27
      </crap>
      <complexity>
        59
      </complexity>
      <coverage>
        81.44
      </coverage>
      <crapLoad>
        11
      </crapLoad>
    </method>
    <method>
      <package>
        legacyGame
      </package>
      <className>
        LegacyGame
      </className>
      <methodName>
        printBoardRow
      </methodName>
      <methodSignature>
        (Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        private  java.lang.String printBoardRow(java.lang.String, java.lang.String, int)
      </fullMethod>
      <crap>
        110.00
      </crap>
      <complexity>
        10
      </complexity>
      <coverage>
        0.00
      </coverage>
      <crapLoad>
        10
      </crapLoad>
    </method>
  </methods>
</crap_result>
